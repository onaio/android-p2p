plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlinx-serialization'
    id 'jacoco'
    id 'com.github.kt3k.coveralls'
    id 'com.diffplug.spotless'
    id 'maven-publish'
}
apply plugin: 'kotlin-kapt'

jacoco {
    toolVersion = '0.8.7'
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.0'
    }
    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                beforeTest { testDescriptor ->
                    println "${testDescriptor.className} > ${testDescriptor.name} STARTED"
                }
            }
        }
    }
}

dependencies { configuration ->

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.work:work-runtime-ktx:2.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'androidx.activity:activity:1.3.1'

    //Configure Jetpack Compose and navigation
    api("androidx.compose.ui:ui:$composeVersion")
    api("androidx.compose.ui:ui-tooling:$composeVersion")
    api("androidx.compose.foundation:foundation:$composeVersion")
    api("androidx.compose.material:material:$composeVersion")
    api("androidx.compose.material:material-icons-core:$composeVersion")
    api("androidx.compose.material:material-icons-extended:$composeVersion")
    api("androidx.compose.runtime:runtime-livedata:$composeVersion")
    api("androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1")
    api("androidx.paging:paging-compose:1.0.0-alpha15")
    api("androidx.activity:activity-compose:1.5.1")
    api ("com.google.accompanist:accompanist-flowlayout:0.23.1")
    api("androidx.work:work-runtime-ktx:2.7.1")

    roomDependencies(configuration)
    locationDependencies(configuration)

    testImplementation 'junit:junit:4.13.2'

    testImplementation deps.junit5_api
    testRuntimeOnly deps.junit5_engine
    testRuntimeOnly deps.junit5_engine_vintage
    testImplementation deps.robolectric
    testImplementation deps.atsl.ext_junit
    testImplementation deps.atsl.ext_junit_ktx
    testImplementation deps.coroutines.test
    testImplementation deps.androidx.core_test
    testImplementation deps.mockk
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Compose UI test dependencies
    testImplementation("androidx.compose.ui:ui-test-junit4:$composeVersion")
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:$composeVersion")
    debugImplementation("androidx.compose.ui:ui-test-manifest:$composeVersion")
}

def roomDependencies(configuration) {
    configuration.implementation(deps.room.ktx)
    configuration.kapt(deps.room.compiler)

    // sql cipher deps
    configuration.implementation "net.zetetic:android-database-sqlcipher:4.5.0"
    configuration.implementation "androidx.sqlite:sqlite:2.0.1"

    // Room Test helpers
    configuration.testImplementation "androidx.room:room-testing:2.3.0"
}

def locationDependencies(configuration) {
    configuration.implementation 'com.google.android.gms:play-services-location:16.0.0'
}

task jacocoTestReport(type: JacocoReport, dependsOn: [
        'testDebugUnitTest',
        /*'connectedDebugAndroidTest', 'createDebugCoverageReport'*/]) {

    reports {
        xml.required = true
        html.required = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = [
                    // Android
                    '**Constant*.*',
                    '**/*$ViewBinder*.*',
                    'android/**/*.*',
                    '**/*Application*.*',
                    '**/*Test*.*',
                    '**/*$ViewInjector*.*',
                    '**/BuildConfig.*',
                    '**/*BR*.*',
                    '**/Manifest*.*',
                    '**/R.class',
                    '**/R$*.class',
                    '**/*Preview*.*',
                    // kotlin (Sealed and Data classes)
                    '**/*$Lambda$*.*',
                    '**/*Companion*.*',
                    '**/*$Result.*',
                    '**/*$Result$*.*',
                    // Data Binding
                    '**/databinding/*',
                    // Generated room DAO implementation classes
                    '**/*_Impl*.*'
            ]

    def javaDebugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes/", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"
    def kotlinSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories.setFrom(files([mainSrc, kotlinSrc]))
    classDirectories.setFrom(files([javaDebugTree, kotlinDebugTree]))

    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/code_coverage/debugAndroidTest/connected/**/*.ec',
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec'
    ]))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
    sourceDirs = ["$project.projectDir/src/main/java"]
}

spotless {
    kotlin {
        target '**/*.kt'
        ktlint(versions.ktlint).userData(['indent_size': '2', 'continuation_indent_size': '2'])
        ktfmt().googleStyle()
        licenseHeaderFile "${project.rootProject.projectDir}/license-header.txt"
    }
}

afterEvaluate {
    publishing {
        publications {
            snapshot(MavenPublication) {
                from(components["release"])
                artifactId = "p2p-lib"
                groupId = "org.smartregister"
                version = "0.6.8-composition-1.2.1-SNAPSHOT"
                pom {
                    name.set("Peer to Peer Library")
                }
            }
        }
        repositories {
            maven {
                name = 'sonatype'
                url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }

        }
    }
}



def getRepositoryPassword() {
    return hasProperty('sonatypePassword') ? sonatypePassword : ""
}

def getRepositoryUsername() {
    return hasProperty('sonatypeUsername') ? sonatypeUsername : ""
}
